import os
import subprocess
import time
from sqlalchemy import create_engine, ForeignKey
from sqlalchemy.orm import declarative_base, sessionmaker, relationship
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))


def run_command(command_list):
    try:
        subprocess.run(command_list, check=True)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def install_docker():
    print("üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Docker...")
    if subprocess.run(["docker", "--version"], capture_output=True).returncode != 0:
        print("‚¨áÔ∏è  –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker...")
        run_command(["sudo", "apt", "update"])
        run_command(["sudo", "apt", "install", "-y", "docker.io"])
    else:
        print("‚úÖ Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")


def install_postgres_image():
    print("üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ –æ–±—Ä–∞–∑ PostgreSQL...")
    images = subprocess.getoutput("docker images")
    if "postgres" not in images:
        print("‚¨áÔ∏è  –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–∑ PostgreSQL...")
        run_command(["docker", "pull", "postgres"])
    else:
        print("‚úÖ –û–±—Ä–∞–∑ PostgreSQL —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")


def get_user_input():
    db_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ")
    user = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
    password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
    host = input("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ö–æ—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é localhost): ") or "localhost"
    port = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5432): ") or "5432"
    container_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é postgresql): ") or "postgresql"
    create_tables_answer = input("–ñ–µ–ª–∞–µ—Ç–µ –ª–∏ –≤—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã? (Y/n) ")
    return db_name, user, password, host, port, container_name, create_tables_answer


def run_postgres_container(db_name, user, password, port, container_name):
    while True:
        result = subprocess.run(
            ["docker", "ps", "-a", "--format", "{{.Names}}"],
            capture_output=True, text=True
        )
        containers = result.stdout.splitlines()
        if container_name in containers:
            container_name = input(
                f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∏–º–µ–Ω–µ–º '{container_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: "
            ).strip()
        else:
            break

    while True:
        result = subprocess.run(
            ["docker", "ps", "-a", "--format", "{{.Ports}}"],
            capture_output=True, text=True
        )
        ports_list = result.stdout.splitlines()
        if any(f":{port}->" in mapping for mapping in ports_list):
            port = input(f"–ü–æ—Ä—Ç '{port}' —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç: ").strip()
        else:
            break

    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä PostgreSQL...")
    command = [
        "docker", "run", "-d",
        "--name", container_name,
        "-e", f"POSTGRES_DB={db_name}",
        "-e", f"POSTGRES_USER={user}",
        "-e", f"POSTGRES_PASSWORD={password}",
        "-p", f"{port}:5432",
        "postgres"
    ]
    run_command(command)
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
    time.sleep(5)
    return port, container_name


def generate_connection_string(user, password, port, db_name, host="localhost"):
    return f"postgresql+psycopg2://{user}:{password}@{host}:{port}/{db_name}"


def check_connection(connection_string, create_tables_answer: str):
    if create_tables_answer.lower() in ["yes", "y", ""]:
        print("üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∏ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...")
        try:
            engine = create_engine(connection_string)
            Session = sessionmaker(bind=engine)
            session = Session()

            with engine.connect() as conn:
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            try:
                Base = declarative_base()
                from sqlalchemy import Column, Integer, String
                class User(Base):
                    __tablename__ = "users"

                    id = Column(Integer, primary_key=True, autoincrement=True)
                    username = Column(String(50), nullable=False, unique=True)
                    name = Column(String(100), nullable=False)
                    lastname = Column(String(100), nullable=False)
                    post = Column(String(150))
                    email = Column(String(255), nullable=False, unique=True)
                    phone_number = Column(String(20))
                    status = Column(String(100), nullable=False)
                    last_check = Column(String(50), nullable=False)

                Base.metadata.create_all(engine)
                print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")

                from sqlalchemy.sql import text

                if input("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π? (Y/n) ").lower() in ["y", "yes", ""]:
                    test_users_query = text("""
                        INSERT INTO users (id, username, name, lastname, post, email, phone_number, status, last_check) VALUES
                        (1, 'jdoe', 'John', 'Doe', 'Software Engineer', 'jdoe@example.com', '+1234567890', 'active', NOW()),
                        (2, 'asmith', 'Alice', 'Smith', 'Data Scientist', 'asmith@example.com', '+1234567891', 'active', NOW()),
                        (3, 'bwayne', 'Bruce', 'Wayne', 'CEO', 'bwayne@example.com', '+1234567892', 'inactive', NOW()),
                        (4, 'ckent', 'Clark', 'Kent', 'Journalist', 'ckent@example.com', '+1234567893', 'active', NOW()),
                        (5, 'dprince', 'Diana', 'Prince', 'Ambassador', 'dprince@example.com', '+1234567894', 'active', NOW());
                    """)
                    session.execute(test_users_query)
                    session.commit()
                    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")


if __name__ == "__main__":
    print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n1 - –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n2 - –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    choice = input("–í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2: ")

    if choice == "1":
        install_docker()
        install_postgres_image()

        db_name, user, password, host, port, container_name, create_tables_answer = get_user_input()
        port, container_name = run_postgres_container(db_name, user, password, port, container_name)

        connection_string = generate_connection_string(user, password, port, db_name, host)
        print(f"üîó –í–∞—à–∞ —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connection_string}")
        check_connection(connection_string, create_tables_answer)

    elif choice == "2":
        print("üîπ –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        script_dir = os.path.abspath(os.getcwd())
        repo_path = os.path.join(script_dir, "web_interface_for_kirtapp")

        if os.path.exists(repo_path):
            print("üîπ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å pull...")
            try:
                subprocess.run(["git", "-C", repo_path, "pull"], check=True)
                print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω!")
            except subprocess.CalledProcessError as e:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:", e)
        else:
            print("üÜï –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–ª–æ–Ω–∏—Ä—É–µ–º...")
            try:
                subprocess.run(["git", "clone", "https://github.com/KIRT-king/web_interface_for_kirtapp.git", repo_path], check=True)
                print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω!")
            except subprocess.CalledProcessError as e:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:", e)

        main_path = os.path.join(repo_path, "main.py")
        subprocess.Popen(["python", main_path])
        print("üöÄ FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
        print(os.path.join(repo_path, "pages"))
        import http.server
        import socketserver
        import os
        import signal
        import sys

        PORT = 5500
        DIRECTORY = os.path.join(os.getcwd(), "web_interface_for_kirtapp", "pages")  # –ü–∞–ø–∫–∞ —Å —Ñ–∞–π–ª–∞–º–∏


        class CustomHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
            def log_message(self, format, *args):
                print(f"[HTTP SERVER] {self.log_date_time_string()} - {format % args}")


        def run_server():
            os.chdir(DIRECTORY)

            socketserver.TCPServer.allow_reuse_address = True

            with socketserver.TCPServer(("", PORT), CustomHTTPRequestHandler) as httpd:
                print(f"üåç HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:{PORT}")

                # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ SIGINT (Ctrl+C), —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                def shutdown_server(signal_received, frame):
                    print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...")
                    httpd.server_close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
                    sys.exit(0)

                signal.signal(signal.SIGINT, shutdown_server)

                httpd.serve_forever()


        if __name__ == "__main__":
            try:
                run_server()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")




